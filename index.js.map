{
  "version": 3,
  "sources": ["index.tsx", "../src/defs.ts", "../src/utils.ts", "../src/core.ts"],
  "sourcesContent": ["import{createElement as h,Fragment as f}from\"react\";/**\r\n * @license GPL-3.0-or-later\r\n * Copyright (C) 2022  DarrenDanielDay <Darren_Daniel_Day@hotmail.com>\r\n *\r\n * This source code is licensed under the GPL-3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nimport React, { Fragment, memo, useCallback, useLayoutEffect, useRef, useState } from \"react\";\r\nimport * as ReactDOM from \"react-dom/client\";\r\nimport { findSolution } from \"../src/core\";\r\nimport { DefectiveDifference, Difference, NodeType, Strategy, WeighResult } from \"../src/defs\";\r\nimport { ConnectedTreeNode, connectParent } from \"../src/utils\";\r\nimport \"./style.css\";\r\n//#region Start up\r\nconst url = new URL(location.href);\r\nconst params = url.searchParams;\r\nconst searchLanguage = params.get(\"lang\") ?? \"\";\r\nconst initCount = +(params.get(\"count\") ?? \"\") || undefined;\r\nconst initTimes = +(params.get(\"times\") ?? \"\") || undefined;\r\nconst initDiffs = +(params.get(\"diff\") ?? \"\") || undefined;\r\nconst knownLangs = [\"zh\", \"en\"];\r\nconst language = knownLangs.includes(searchLanguage) ? searchLanguage : \"zh\";\r\nif (language && document.documentElement.lang !== language) {\r\n  document.documentElement.lang = language;\r\n}\r\nconst i18nModule =\r\n  language === \"en\"\r\n    ? await import(\"./i18n/en.json\", { assert: { type: \"json\" } })\r\n    : await import(\"./i18n/zh.json\", { assert: { type: \"json\" } });\r\nconst i18n = i18nModule.default;\r\ndocument.title += ` - ${i18n[\"app.description\"]}`;\r\n//#endregion\r\n//#region Header component\r\nconst Header: React.FC = memo(() => {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <div role={\"application\"}>\r\n          <img src=\"./icon.svg\" className=\"logo\" alt=\"icon.svg\"></img>\r\n          <img src=\"./text.svg\" className=\"app-text\" alt=\"text.svg\"></img>\r\n        </div>\r\n        <div className=\"menu\" role={\"menu\"}>\r\n          <div className=\"menu-item\" role={\"menuitem\"}>\r\n            <a href=\"https://github.com/DarrenDanielDay/Libra\" target={\"_blank\"}>\r\n              <img src=\"./github.svg\" alt=\"github.svg\" className=\"community\"></img>\r\n            </a>\r\n          </div>\r\n          <div className=\"menu-item\" role={\"menuitem\"}>\r\n            <select\r\n              value={language}\r\n              onChange={({ target }) => {\r\n                const url = new URL(location.href);\r\n                url.searchParams.delete(\"lang\");\r\n                url.searchParams.set(\"lang\", target.value);\r\n                location.href = url.href;\r\n              }}\r\n            >\r\n              <option value=\"zh\">\u7B80\u4F53\u4E2D\u6587</option>\r\n              <option value=\"en\">English</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n});\r\n//#endregion\r\n//#region Conditions component\r\nenum Diff {\r\n  Lighter = -1,\r\n  Unknown = 0,\r\n  Heavier = 1,\r\n}\r\nfunction diffs(diff: Diff): DefectiveDifference[] {\r\n  switch (diff) {\r\n    case Diff.Lighter:\r\n      return [Difference.Lighter];\r\n    case Diff.Heavier:\r\n      return [Difference.Heavier];\r\n    default:\r\n      return [Difference.Lighter, Difference.Heavier];\r\n  }\r\n}\r\ninterface Condition {\r\n  count: number;\r\n  times: number;\r\n  diff: Diff;\r\n}\r\nconst Conditions: React.FC<{\r\n  confirm(condition: Condition): void;\r\n  reset(): void;\r\n}> = memo(({ confirm, reset }) => {\r\n  return (\r\n    <form\r\n      className=\"conditions\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData(e.currentTarget);\r\n        const fields: (keyof Condition)[] = [\"count\", \"times\", \"diff\"];\r\n        const formValue = fields.reduce<Partial<Condition>>((acc, field) => {\r\n          const value = formData.get(field);\r\n          if (typeof value === \"string\") {\r\n            acc[field] = +value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        if (formValue.count && formValue.times && formValue.diff != null) {\r\n          for (const [key, value] of Object.entries(formValue)) {\r\n            params.set(key, value.toString());\r\n          }\r\n          history.replaceState({}, \"\", url);\r\n          confirm(formValue as Condition);\r\n        }\r\n      }}\r\n      onReset={reset}\r\n    >\r\n      <div className=\"condition\">\r\n        <label htmlFor=\"count\">{i18n[\"label.count\"]}</label>\r\n        <input id=\"count\" name=\"count\" type={\"number\"} defaultValue={initCount} required></input>\r\n      </div>\r\n      <div className=\"condition\">\r\n        <label htmlFor=\"times\">{i18n[\"label.times\"]}</label>\r\n        <input id=\"times\" name=\"times\" type={\"number\"} defaultValue={initTimes} required></input>\r\n      </div>\r\n      <div className=\"condition\">\r\n        <label htmlFor=\"diff\">{i18n[\"label.diff\"]}</label>\r\n        <select id=\"diff\" name=\"diff\" defaultValue={initDiffs} required>\r\n          {(\r\n            [\r\n              [Diff.Unknown, i18n[\"diff.unknown\"]],\r\n              [Diff.Heavier, i18n[\"diff.heavier\"]],\r\n              [Diff.Lighter, i18n[\"diff.lighter\"]],\r\n            ] as const\r\n          ).map(([diff, text]) => (\r\n            <option key={diff} value={diff.toString()}>\r\n              {text}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"actions\">\r\n        <button type={\"submit\"} className=\"submit\">\r\n          {i18n[\"actions.confirm\"]}\r\n        </button>\r\n        <button type={\"reset\"} className=\"reset\">\r\n          {i18n[\"actions.reset\"]}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n});\r\n//#endregion\r\n//#region Products Group\r\nconst ProductGroup: React.FC<{ products: Iterable<number> }> = memo(({ products }) => (\r\n  <div className=\"products\">\r\n    {[...products].map((product, i) => (\r\n      <Fragment key={i}>\r\n        {!!i && <code>+</code>}\r\n        <span className=\"product\">P{product}</span>\r\n      </Fragment>\r\n    ))}\r\n  </div>\r\n));\r\n//#endregion\r\n\r\n//#region Compare component\r\nconst Compare: React.FC<{\r\n  lefts: Iterable<number>;\r\n  rights: Iterable<number>;\r\n  comparator: string;\r\n}> = memo(({ lefts, rights, comparator }) => {\r\n  return (\r\n    <div className=\"compare\">\r\n      <ProductGroup products={lefts}></ProductGroup>\r\n      <code>{comparator}</code>\r\n      <ProductGroup products={rights}></ProductGroup>\r\n    </div>\r\n  );\r\n});\r\n//#endregion\r\n\r\n//#region Strategy Tree component\r\nconst diffText = {\r\n  [Difference.Lighter]: i18n[\"diff.lighter\"],\r\n  [Difference.Heavier]: i18n[\"diff.heavier\"],\r\n};\r\nconst getSVGByPath = (content: string): React.ReactElement => {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = content;\r\n  const SVGWrapperComponent: React.FC = memo(() => {\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    useLayoutEffect(() => {\r\n      const svg = template.content.cloneNode(true);\r\n      const containerElement = containerRef.current!;\r\n      if (!containerElement) {\r\n        return;\r\n      }\r\n      containerElement.appendChild(svg);\r\n    }, []);\r\n    return <div ref={containerRef}></div>;\r\n  });\r\n  return <SVGWrapperComponent></SVGWrapperComponent>;\r\n};\r\nconst [leftSVG, balanceSVG, rightSVG] = await Promise.all(\r\n  [\"./balance-scale-left.svg\", \"./balance-scale.svg\", \"./balance-scale-right.svg\"].map(async (path) => {\r\n    const response = await fetch(path);\r\n    const content = await response.text();\r\n    return content;\r\n  })\r\n);\r\nconst weighResultOptions: {\r\n  svg: JSX.Element;\r\n  result: WeighResult;\r\n  position: string;\r\n}[] = [\r\n  {\r\n    svg: getSVGByPath(leftSVG),\r\n    result: WeighResult.Right,\r\n    position: \"left\",\r\n  },\r\n  {\r\n    svg: getSVGByPath(balanceSVG),\r\n    result: WeighResult.Balance,\r\n    position: \"middle\",\r\n  },\r\n  {\r\n    svg: getSVGByPath(rightSVG),\r\n    result: WeighResult.Left,\r\n    position: \"right\",\r\n  },\r\n];\r\nconst RenderNode: React.FC<{\r\n  node: ConnectedTreeNode;\r\n  move(next: ConnectedTreeNode | false): void;\r\n}> = ({ node, move }) => {\r\n  const back = (\r\n    <div className=\"actions\">\r\n      {!!node.parent && (\r\n        <button\r\n          className=\"reset\"\r\n          onClick={() => {\r\n            move(node.parent ?? false);\r\n          }}\r\n        >\r\n          {i18n[\"actions.back\"]}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n  const renderNode = (child: React.ReactNode, info: string, type: string) => (\r\n    <div className={`${type} node`}>\r\n      <p className=\"info\">{info}</p>\r\n      {child}\r\n      {back}\r\n    </div>\r\n  );\r\n  if (node.type == null) {\r\n    return renderNode(null, i18n[\"info.impossible\"], \"null\");\r\n  }\r\n  if (node.type === NodeType.Conclusion) {\r\n    const [bad, diff] = node.enumerated;\r\n    const context = {\r\n      bad,\r\n      diff: diffText[diff],\r\n    };\r\n    return renderNode(\r\n      null,\r\n      i18n[\"info.conclution\"].replace(/\\{(.+?)\\}/g, (_, prop) => Reflect.get(context, prop)),\r\n      \"conclusion\"\r\n    );\r\n  }\r\n  const {\r\n    strategy: [lefts, rights],\r\n  } = node;\r\n\r\n  return renderNode(\r\n    <>\r\n      <Compare lefts={lefts} rights={rights} comparator=\"vs\"></Compare>\r\n      <div className=\"choices\">\r\n        {weighResultOptions.map(({ svg, result, position }, i) => {\r\n          const choose = () => {\r\n            move(node.children[result]);\r\n          };\r\n          return (\r\n            <div\r\n              key={i}\r\n              className={`choice ${position}`}\r\n              role={\"button\"}\r\n              tabIndex={0}\r\n              onClick={choose}\r\n              onKeyDown={(e) => {\r\n                e.key.toLowerCase() === \"enter\" && choose();\r\n              }}\r\n            >\r\n              {svg}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>,\r\n    i18n[\"info.choose\"],\r\n    \"choose\"\r\n  );\r\n};\r\n//#endregion\r\n\r\n//#region Weigh History component\r\ntype WeighHistoryItem = {\r\n  strategy: Strategy;\r\n  result: WeighResult;\r\n};\r\nconst compare = (result: WeighResult) => {\r\n  switch (result) {\r\n    case WeighResult.Left:\r\n      return \"<\";\r\n    case WeighResult.Right:\r\n      return \">\";\r\n    default:\r\n      return \"=\";\r\n  }\r\n};\r\nconst WeighHistory: React.FC<{\r\n  records: WeighHistoryItem[];\r\n}> = ({ records }) => {\r\n  return (\r\n    <div className=\"weigh-history\">\r\n      <p>{i18n[\"label.history\"]}</p>\r\n      {records.map(({ strategy: [lefts, rights], result }, i) => (\r\n        <Compare key={i} lefts={lefts} rights={rights} comparator={compare(result)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n//#endregion\r\n\r\n//#region App component\r\ntype CurrentNode = ConnectedTreeNode | false;\r\ntype AppState = {\r\n  node: CurrentNode;\r\n  root: CurrentNode;\r\n  message: string;\r\n};\r\nconst App: React.FC = () => {\r\n  const [state, setState] = useState<AppState>({\r\n    node: false,\r\n    root: false,\r\n    message: \"\",\r\n  });\r\n  const { node, root, message } = state;\r\n  const setNode = useCallback((newNode: CurrentNode) => setState((s) => ({ ...s, node: newNode })), []);\r\n  const weighRecords =\r\n    node &&\r\n    history &&\r\n    ((): WeighHistoryItem[] => {\r\n      const path: [strategy: Strategy, choice: WeighResult][] = [];\r\n      for (let pointer = node; pointer.parent && pointer !== root; pointer = pointer.parent) {\r\n        const parent = pointer.parent;\r\n        if (parent.type === NodeType.Strategy /** Actually always true. */) {\r\n          path.push([parent.strategy, weighResultOptions.find((o) => parent.children[o.result] === pointer)!.result]);\r\n        }\r\n      }\r\n      return path.reverse().map(([strategy, result]) => ({ strategy, result }));\r\n    })();\r\n  const onConfirm = useCallback(({ count, times, diff }: Condition): void => {\r\n    const kinds = diffs(diff);\r\n    for (const solution of findSolution(count, times, kinds)) {\r\n      const foundNode = connectParent(solution);\r\n      setState((s) => ({ ...s, node: foundNode, root: foundNode, message: \"\" }));\r\n      return;\r\n    }\r\n    setState((s) => ({\r\n      ...s,\r\n      node: false,\r\n      root: false,\r\n      message: i18n[\"info.no.solution\"],\r\n    }));\r\n  }, []);\r\n  const onClear = useCallback(() => setState({ message: \"\", node: false, root: false }), []);\r\n  return (\r\n    <div>\r\n      <Header></Header>\r\n      <main>\r\n        <Conditions confirm={onConfirm} reset={onClear}></Conditions>\r\n        {message && (\r\n          <div className=\"alert alert-danger\" role={\"alert\"}>\r\n            {message}\r\n          </div>\r\n        )}\r\n        {node && <RenderNode node={node} move={setNode}></RenderNode>}\r\n        {weighRecords && !!weighRecords.length && <WeighHistory records={weighRecords}></WeighHistory>}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n//#endregion\r\n//#region main\r\nconst app = document.querySelector(\"div\")!;\r\nReactDOM.createRoot(app).render(<App />);\r\n//#endregion\r\n", "/**\r\n * @license GPL-3.0-or-later\r\n * Copyright (C) 2022  DarrenDanielDay <Darren_Daniel_Day@hotmail.com>\r\n *\r\n * This source code is licensed under the GPL-3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\ntype EnumType<T> = T[keyof T];\r\n/**\r\n * \u5DEE\u522B\r\n */\r\nexport const Difference = {\r\n  Lighter: -1,\r\n  Normal: 0,\r\n  Heavier: 1,\r\n} as const;\r\nexport type Difference = EnumType<typeof Difference>;\r\n\r\nexport type DefectiveDifference = typeof Difference.Lighter | typeof Difference.Heavier;\r\n\r\nexport const WeighResult = {\r\n  /**\r\n   * \u4EE3\u8868\u5DE6\u8FB9\u8F7B\r\n   */\r\n  Left: -1,\r\n  Balance: 0,\r\n  /**\r\n   * \u4EE3\u8868\u53F3\u8FB9\u8F7B\r\n   */\r\n  Right: 1,\r\n} as const;\r\nexport type WeighResult = EnumType<typeof WeighResult>;\r\nexport type Product = number;\r\n\r\nexport type Case = [bad: Product, d: DefectiveDifference];\r\n\r\nexport type Sequence = Product[];\r\n\r\nexport type Strategy = [Lefts: Set<Product>, Rights: Set<Product>];\r\n\r\nexport const NodeType = {\r\n  Strategy: 1,\r\n  Conclusion: 0,\r\n} as const;\r\nexport type NodeType = EnumType<typeof NodeType>;\r\n\r\nexport type StrategyNode = {\r\n  type: typeof NodeType.Strategy;\r\n  strategy: Strategy;\r\n  cases: Case[];\r\n  children: Record<WeighResult, TreeNode | null>;\r\n};\r\n\r\nexport type ConclusionNode = {\r\n  type: typeof NodeType.Conclusion;\r\n  enumerated: Case;\r\n};\r\n\r\nexport type TreeNode = StrategyNode | ConclusionNode;\r\n", "/**\r\n * @license GPL-3.0-or-later\r\n * Copyright (C) 2022  DarrenDanielDay <Darren_Daniel_Day@hotmail.com>\r\n *\r\n * This source code is licensed under the GPL-3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nimport {\r\n  Case,\r\n  ConclusionNode,\r\n  DefectiveDifference,\r\n  Difference,\r\n  NodeType,\r\n  Product,\r\n  Strategy,\r\n  StrategyNode,\r\n  TreeNode,\r\n  WeighResult,\r\n} from \"./defs.js\";\r\n\r\nexport function lean(d: Difference): WeighResult {\r\n  return d === Difference.Lighter ? WeighResult.Left : WeighResult.Right;\r\n}\r\n\r\nexport function inverse(w: WeighResult): WeighResult {\r\n  switch (w) {\r\n    case WeighResult.Left:\r\n      return WeighResult.Right;\r\n    case WeighResult.Right:\r\n      return WeighResult.Left;\r\n    default:\r\n      return WeighResult.Balance;\r\n  }\r\n}\r\n\r\nexport function products(n: number): Product[] {\r\n  return Array.from({ length: n }, (_, i) => i + 1);\r\n}\r\n\r\nexport const unknownDifferences: DefectiveDifference[] = [Difference.Heavier, Difference.Lighter];\r\n\r\nexport function cases(products: Product[], differences: DefectiveDifference[] = unknownDifferences) {\r\n  return products.flatMap((bad) => differences.map<Case>((d) => [bad, d]));\r\n}\r\n\r\nexport function weigh(enumerated: Case, strategy: Strategy): WeighResult {\r\n  const [bad, d] = enumerated;\r\n  const [Lefts, Rights] = strategy;\r\n  if (Lefts.has(bad)) {\r\n    return lean(d);\r\n  }\r\n  if (Rights.has(bad)) {\r\n    return inverse(lean(d));\r\n  }\r\n  return WeighResult.Balance;\r\n}\r\n\r\nexport function TestTree(enumerated: Case, root: TreeNode): boolean {\r\n  let node = root;\r\n  while (node.type !== NodeType.Conclusion) {\r\n    const w = weigh(enumerated, node.strategy);\r\n    const next = node.children[w];\r\n    if (!next) {\r\n      console.debug(\"Conclusion is not available for case:\", enumerated);\r\n      return false;\r\n    }\r\n    node = next;\r\n  }\r\n  const result = node.enumerated[0] === enumerated[0] && node.enumerated[1] === enumerated[1];\r\n  if (!result) {\r\n    console.log(\"expect:\", enumerated);\r\n    console.log(\"actual:\", node.enumerated);\r\n  }\r\n  return result;\r\n}\r\n\r\ntype NullNode = { type: null } & HasParent;\r\n\r\ntype HasParent = {\r\n  parent?: ConnectedTreeNode;\r\n};\r\n\r\ntype ConnectedStrategyNodeChildren = {\r\n  children: Record<WeighResult, ConnectedTreeNode | NullNode>;\r\n};\r\n\r\nexport type ConnectedTreeNode =\r\n  | ((ConclusionNode | (Omit<StrategyNode, \"children\"> & ConnectedStrategyNodeChildren)) & HasParent)\r\n  | NullNode;\r\nexport function connectParent(root: TreeNode): ConnectedTreeNode {\r\n  const results = [WeighResult.Left, WeighResult.Balance, WeighResult.Right];\r\n  function dfs(node: TreeNode, parent?: TreeNode, connectedParent?: ConnectedTreeNode): ConnectedTreeNode {\r\n    if (node.type === NodeType.Conclusion) {\r\n      return {\r\n        ...node,\r\n        parent: connectedParent,\r\n      };\r\n    }\r\n    const { children, ...withoutChildren } = node;\r\n    // @ts-expect-error later updated type\r\n    const laterUpdatedChildren: ConnectedStrategyNodeChildren[\"children\"] = {};\r\n    const withParent: ConnectedTreeNode = {\r\n      ...withoutChildren,\r\n      children: laterUpdatedChildren,\r\n      parent: connectedParent,\r\n    };\r\n    for (const w of results) {\r\n      const child = node.children[w];\r\n      if (child) {\r\n        withParent.children[w] = dfs(child, node, withParent);\r\n      } else {\r\n        withParent.children[w] = { type: null, parent: withParent };\r\n      }\r\n    }\r\n    return withParent;\r\n  }\r\n  return dfs(root);\r\n}\r\n", "/**\r\n * @license GPL-3.0-or-later\r\n * Copyright (C) 2022  DarrenDanielDay <Darren_Daniel_Day@hotmail.com>\r\n *\r\n * This source code is licensed under the GPL-3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nimport { Difference, NodeType, Product, TreeNode, Strategy, Case, WeighResult, DefectiveDifference } from \"./defs.js\";\r\nimport { cases, products, weigh } from \"./utils.js\";\r\n\r\nexport function* findSolution(n: number, k: number, diffectiveDifferences: DefectiveDifference[]): Generator<TreeNode> {\r\n  const allProducts = products(n);\r\n  function* generateFor(restCases: Case[], restK: number): Generator<TreeNode> {\r\n    const aggregatedCases = aggregateCases(restCases);\r\n    const { length } = restCases;\r\n    if (length === 0) {\r\n      return;\r\n    }\r\n    if (length === 1) {\r\n      const [[bad, difference]] = restCases;\r\n      if (bad == null || difference == null) {\r\n        throw new Error(\"Impossible\");\r\n      }\r\n      yield {\r\n        type: NodeType.Conclusion,\r\n        enumerated: [bad, difference],\r\n      };\r\n      return;\r\n    }\r\n    if (restK === 0) {\r\n      return;\r\n    }\r\n    if (restCases.length > 3 ** restK) {\r\n      return;\r\n    }\r\n    const nextK = restK - 1;\r\n    const maxCaseCoverCount = 3 ** nextK;\r\n    const possibleLighter: Product[] = [];\r\n    const possibleHeavier: Product[] = [];\r\n    const unWeighed: Product[] = [];\r\n    const pendingQualified = new Set(allProducts);\r\n    for (const [product, difference] of aggregatedCases) {\r\n      switch (difference) {\r\n        case Difference.Lighter:\r\n          possibleLighter.push(product);\r\n          break;\r\n        case Difference.Heavier:\r\n          possibleHeavier.push(product);\r\n          break;\r\n        default:\r\n          unWeighed.push(product);\r\n          break;\r\n      }\r\n      pendingQualified.delete(product);\r\n    }\r\n    const qualified = [...pendingQualified];\r\n    const lighterCount = possibleLighter.length;\r\n    const heavierCount = possibleHeavier.length;\r\n    const unWeighedCount = unWeighed.length;\r\n    const qualifiedCount = qualified.length;\r\n    // \u653E\u5728\u4E00\u8FB9\u4E0D\u8FDB\u884C\u79F0\u91CF\u7684\u6700\u5927\u6570\u91CF\u662Fn - 2\uFF0C\u5373\u81F3\u5C11\u9700\u8981\u79F0\u53D62\u4E2A\u4EA7\u54C1\u624D\u662F\u6709\u6548\u64CD\u4F5C\r\n    const maxAsideCount = n - 2;\r\n    // \u9700\u8981\u4FDD\u8BC1\u5C06\u4F59\u6570\u53BB\u6389\uFF0C\u5269\u4E0B2\u7684\u500D\u6570\u4E2A\u624D\u80FD\u5E73\u5206\u5230\u5929\u5E73\u4E24\u8FB9\r\n    const minAsideCount = n % 2;\r\n    for (let asideCount = maxAsideCount; asideCount >= minAsideCount; asideCount -= 2) {\r\n      const groupCount = (n - asideCount) / 2;\r\n      for (const [ll, lh, lu, lq] of breakInto<[number, number, number, number]>(\r\n        groupCount,\r\n        [0, 0, 0, 0],\r\n        [lighterCount, heavierCount, unWeighedCount, qualifiedCount],\r\n        0\r\n      )) {\r\n        for (const [rl, rh, ru, rq] of breakInto<[number, number, number, number]>(\r\n          groupCount,\r\n          [0, 0, 0, 0],\r\n          [lighterCount - ll, heavierCount - lh, unWeighedCount - lu, qualifiedCount - lq],\r\n          0\r\n        )) {\r\n          const Lefts = new Set<Product>([\r\n            ...possibleLighter.slice(0, ll),\r\n            ...possibleHeavier.slice(0, lh),\r\n            ...unWeighed.slice(0, lu),\r\n            ...qualified.slice(0, lq),\r\n          ]);\r\n          const Rights = new Set<Product>([\r\n            ...possibleLighter.slice(ll, ll + rl),\r\n            ...possibleHeavier.slice(lh, lh + rh),\r\n            ...unWeighed.slice(lu, lu + ru),\r\n            ...qualified.slice(lq, lq + rq),\r\n          ]);\r\n          const strategy: Strategy = [Lefts, Rights];\r\n          const leftResults: Case[] = [];\r\n          const rightResults: Case[] = [];\r\n          const balanceResults: Case[] = [];\r\n          for (const possibleCase of restCases) {\r\n            switch (weigh(possibleCase, strategy)) {\r\n              case WeighResult.Balance:\r\n                balanceResults.push(possibleCase);\r\n                break;\r\n              case WeighResult.Left:\r\n                leftResults.push(possibleCase);\r\n                break;\r\n              case WeighResult.Right:\r\n                rightResults.push(possibleCase);\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n          if ([leftResults, rightResults, balanceResults].some((results) => results.length > maxCaseCoverCount)) {\r\n            // \u5982\u679C\u4EFB\u610F\u4E00\u4E2A\u7ED3\u679C\u5206\u7C7B\u5185\u5B58\u5728\u8D85\u8FC7`3 ^ (k - 1)`\u79CD\u60C5\u51B5\uFF0C\u5219\u6B64\u5212\u5206\u7B56\u7565\u4E0D\u53EF\u80FD\u5F97\u51FA\u7ED3\u8BBA\r\n            continue;\r\n          }\r\n          const lefts = (function* () {\r\n            if (!leftResults.length) {\r\n              // \u65E0\u7B26\u5408\u7684case\uFF0C\u5219\u751F\u6210\u4E00\u4E2A\u7A7A\u8282\u70B9\r\n              yield null;\r\n              return;\r\n            }\r\n            const newQualified = [...qualified];\r\n            // \u9884\u5224\u64CD\u4F5C\r\n            // \u5982\u679C\u4E00\u4E2A\u4EA7\u54C1\u5F53\u524D\u53EA\u5269\u4E0B\u662F\u91CD\u6B21\u54C1\u7684\u53EF\u80FD\uFF0C\u5374\u53C8\u51FA\u73B0\u5728\u4E86\u5929\u5E73\u7684\u8F7B\u7684\u90A3\u4E00\u8FB9\r\n            // \u90A3\u4E48\u8FD9\u4E2A\u4EA7\u54C1\u53EA\u80FD\u662F\u5408\u683C\u54C1\r\n            // \u540E\u9762\u6709\u56DB\u6BB5\u4EE3\u7801\u5747\u540C\u7406\r\n            for (const left of Lefts) {\r\n              if (aggregatedCases.get(left) === Difference.Heavier) {\r\n                newQualified.push(left);\r\n              }\r\n            }\r\n            for (const right of Rights) {\r\n              if (aggregatedCases.get(right) === Difference.Lighter) {\r\n                newQualified.push(right);\r\n              }\r\n            }\r\n            for (const node of generateFor(leftResults, nextK)) {\r\n              yield node;\r\n            }\r\n          })();\r\n          const rights = (function* () {\r\n            if (!rightResults.length) {\r\n              // \u65E0\u7B26\u5408\u7684case\uFF0C\u5219\u751F\u6210\u4E00\u4E2A\u7A7A\u8282\u70B9\r\n              yield null;\r\n              return;\r\n            }\r\n            const newQualified = [...qualified];\r\n            for (const left of Lefts) {\r\n              if (aggregatedCases.get(left) === Difference.Lighter) {\r\n                newQualified.push(left);\r\n              }\r\n            }\r\n            for (const right of Rights) {\r\n              if (aggregatedCases.get(right) === Difference.Heavier) {\r\n                newQualified.push(right);\r\n              }\r\n            }\r\n            for (const node of generateFor(rightResults, nextK)) {\r\n              yield node;\r\n            }\r\n          })();\r\n          const balances = (function* () {\r\n            if (!balanceResults.length) {\r\n              // \u65E0\u7B26\u5408\u7684case\uFF0C\u5219\u751F\u6210\u4E00\u4E2A\u7A7A\u8282\u70B9\r\n              yield null;\r\n              return;\r\n            }\r\n            const newQualified = [...qualified, ...Lefts, ...Rights];\r\n            for (const node of generateFor(balanceResults, nextK)) {\r\n              yield node;\r\n            }\r\n          })();\r\n          for (const left of lefts) {\r\n            for (const right of rights) {\r\n              for (const balance of balances) {\r\n                if (!(left || right || balance)) {\r\n                  continue;\r\n                }\r\n                yield {\r\n                  type: NodeType.Strategy,\r\n                  strategy,\r\n                  cases: restCases,\r\n                  children: {\r\n                    [WeighResult.Left]: left,\r\n                    [WeighResult.Balance]: balance,\r\n                    [WeighResult.Right]: right,\r\n                  },\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const allCases = cases(allProducts, diffectiveDifferences);\r\n  const greedyLeastK = Math.ceil(Math.log(allCases.length) / Math.log(3));\r\n  yield* generateFor(allCases, Math.min(k, greedyLeastK));\r\n}\r\n\r\n/**\r\n * \u5C06\u805A\u5408\u4E3A\u53EF\u80FD\u662F\u8F7B/\u91CD/\u672A\u77E5\r\n * @param cases \u53EF\u80FD\u60C5\u51B5\r\n */\r\nfunction aggregateCases(cases: Case[]): Map<Product, Difference> {\r\n  return cases.reduce((aggregate, [bad, d]) => {\r\n    return aggregate.set(bad, aggregate.has(bad) ? Difference.Normal : d);\r\n  }, new Map<Product, Difference>());\r\n}\r\n\r\n/**\r\n * \u679A\u4E3E\u548C\u4E3Asum\u7684\u6240\u6709seq\u7EC4\u5408\uFF0C\u6EE1\u8DB3\uFF1A\r\n *\r\n * _.sum(seq) === sum && seq.every((n, i) => n <= maxArr[i])\r\n *\r\n * \u901A\u8FC7\u539F\u5730\u4FEE\u6539seq\u6570\u7EC4\u7684\u65B9\u5F0F\u5B9E\u73B0\uFF0C\u4EE5\u51CF\u5C11\u591A\u4F59\u5E8F\u5217\u7684\u521B\u5EFA\r\n *\r\n * @param sum \u548C\r\n * @param seq \u679A\u4E3E\u5E8F\u5217\r\n * @param maxArr \u5355\u9879\u7684\u6700\u5927\u503C\r\n * @param workingIndex \u6B63\u5728\u679A\u4E3E\u7684\u79CD\u7C7B\u5E8F\u53F7\r\n */\r\nfunction* breakInto<Tuple extends number[]>(\r\n  sum: number,\r\n  seq: Tuple,\r\n  maxArr: Tuple,\r\n  workingIndex: number\r\n): Generator<Tuple> {\r\n  if (workingIndex === seq.length - 1) {\r\n    if (maxArr[workingIndex] >= sum) {\r\n      seq[workingIndex] = sum;\r\n      yield seq;\r\n    }\r\n    return;\r\n  }\r\n  const max = Math.min(maxArr[workingIndex]!, sum);\r\n  const nextIndex = workingIndex + 1;\r\n  for (let i = 0; i <= max; i++) {\r\n    seq[workingIndex] = i;\r\n    yield* breakInto(sum - i, seq, maxArr, nextIndex);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["h", "f", "Fragment", "memo", "useCallback", "useLayoutEffect", "useRef", "useState", "ReactDOM", "Difference", "WeighResult", "NodeType", "lean", "d", "Difference", "WeighResult", "inverse", "w", "products", "n", "_", "i", "unknownDifferences", "cases", "differences", "bad", "weigh", "enumerated", "strategy", "Lefts", "Rights", "connectParent", "root", "results", "WeighResult", "dfs", "node", "parent", "connectedParent", "NodeType", "children", "withoutChildren", "withParent", "w", "child", "findSolution", "n", "k", "diffectiveDifferences", "allProducts", "products", "generateFor", "restCases", "restK", "aggregatedCases", "aggregateCases", "length", "bad", "difference", "NodeType", "nextK", "maxCaseCoverCount", "possibleLighter", "possibleHeavier", "unWeighed", "pendingQualified", "product", "Difference", "qualified", "lighterCount", "heavierCount", "unWeighedCount", "qualifiedCount", "maxAsideCount", "minAsideCount", "asideCount", "groupCount", "ll", "lh", "lu", "lq", "breakInto", "rl", "rh", "ru", "rq", "Lefts", "Rights", "strategy", "leftResults", "rightResults", "balanceResults", "possibleCase", "weigh", "WeighResult", "results", "lefts", "newQualified", "left", "right", "node", "rights", "balances", "balance", "allCases", "cases", "greedyLeastK", "aggregate", "d", "sum", "seq", "maxArr", "workingIndex", "max", "nextIndex", "i", "url", "params", "searchLanguage", "initCount", "initTimes", "initDiffs", "knownLangs", "language", "i18nModule", "i18n", "Header", "memo", "h", "target", "diffs", "diff", "Difference", "Conditions", "memo", "confirm", "reset", "h", "e", "formData", "formValue", "acc", "field", "value", "key", "params", "url", "i18n", "initCount", "initTimes", "initDiffs", "text", "ProductGroup", "products", "product", "i", "Fragment", "Compare", "lefts", "rights", "comparator", "diffText", "getSVGByPath", "content", "template", "SVGWrapperComponent", "containerRef", "useRef", "useLayoutEffect", "svg", "containerElement", "leftSVG", "balanceSVG", "rightSVG", "path", "weighResultOptions", "WeighResult", "RenderNode", "node", "move", "back", "renderNode", "child", "info", "type", "NodeType", "bad", "context", "_", "prop", "f", "result", "position", "choose", "compare", "WeighHistory", "records", "App", "state", "setState", "useState", "root", "message", "setNode", "useCallback", "newNode", "weighRecords", "pointer", "parent", "o", "strategy", "onConfirm", "count", "times", "kinds", "solution", "findSolution", "foundNode", "connectParent", "s", "onClear", "Header", "app"]
}
