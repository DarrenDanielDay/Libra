/**
 * @license MIT
 * Copyright (C) 2022  DarrenDanielDay <Darren_Daniel_Day@hotmail.com>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import type { AnyFunc } from "./types.js";
export declare let __DEV__: boolean;
export declare const setMode: (isDev: boolean) => boolean;
export declare const patch: <T extends unknown>(a: T, b: Partial<T>) => T;
export declare const once: <T extends unknown>(evaluate: () => T) => () => T;
export declare const scopes: <T extends {}>() => readonly [(val: T) => number, () => void, () => T | undefined];
export declare const push: <T extends unknown>(arr: T[], val: T) => number;
export declare const pop: <T extends unknown>(arr: T[]) => T | undefined;
export declare const noop: () => void;
export declare const applyAll: (cleanups: Iterable<() => void>) => () => void;
export declare const isString: (v: unknown) => v is string;
export declare const isFunction: (v: unknown) => v is AnyFunc;
export declare const isObject: (v: unknown) => v is object;
export declare const compare: (value1: any, value2: any) => boolean;
export declare const err: (error: unknown) => void;
export declare const warn: <T extends unknown>(msg: string, value: T) => T;
//# sourceMappingURL=util.d.ts.map