export let __DEV__ = process.env.NODE_ENV !== "production";
export const setMode = (isDev) => (__DEV__ = isDev);
export const patch = Object.assign;
export const once = (evaluate) => {
    let evaluated = false;
    let value;
    return () => {
        if (evaluated) {
            return value;
        }
        evaluated = true;
        return (value = evaluate());
    };
};
export const scopes = () => {
    const stack = [];
    const resolve = () => stack.at(-1);
    const enter = (val) => push(stack, val);
    const quit = () => {
        pop(stack);
    };
    return [enter, quit, resolve];
};
export const push = (arr, val) => arr.push(val);
export const pop = (arr) => arr.pop();
export const noop = () => { };
export const applyAll = (cleanups) => () => {
    for (const cleanup of cleanups) {
        cleanup();
    }
};
export const isString = (v) => typeof v === "string";
export const isFunction = (v) => typeof v === "function";
export const isObject = (v) => v != null && typeof v === "object";
export const compare = Object.is;
export const err = (error) => {
    const msg = error instanceof Error
        ? `stack trace: 
${error.stack}`
        : JSON.stringify(error);
    console.error(`[ERROR]: ${msg}`);
};
export const warn = (msg, value) => {
    if (__DEV__) {
        console.warn(msg);
    }
    return value;
};
//# sourceMappingURL=util.js.map