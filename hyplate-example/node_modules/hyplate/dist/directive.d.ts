import type { FunctionalComponent, Mountable, Props, Query } from "./types.js";
/**
 * The `If` directive for conditional rendering.
 */
export declare const If: FunctionalComponent<{
    condition: Query<boolean>;
}, {
    then: Mountable<any>;
    else?: Mountable<any>;
}>;
/**
 * The `Show` directive for conditional rendering.
 *
 * Same underlying logic with the {@link If} directive but with different styles of API.
 */
export declare const Show: FunctionalComponent<{
    when: Query<boolean>;
    fallback?: Mountable<any>;
}, Mountable<any>>;
interface ForProps<T extends unknown> {
    /**
     * The iterable query.
     */
    of: Query<Iterable<T>>;
}
/**
 * The `for` directive for list rendering.
 *
 * The `children` must be a render function.
 *
 * `Vue.JS` reference: {@link https://github.com/vuejs/core/blob/main/packages/runtime-core/src/renderer.ts#L1747}
 */
export declare const For: <T extends unknown>({ of, children, }: Props<ForProps<T>, (item: T) => JSX.Element, undefined>) => Mountable<void>;
export {};
//# sourceMappingURL=directive.d.ts.map