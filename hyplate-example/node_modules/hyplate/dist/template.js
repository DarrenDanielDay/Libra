import { $$, appendChild, before, clone, element, insertSlot, remove } from "./core.js";
import { createHooks, enterHooks, quitHooks } from "./hooks.js";
import { applyAll, isFunction, once, patch, push } from "./util.js";
import { withCommentRange } from "./internal.js";
export const template = (input) => input instanceof HTMLTemplateElement ? input : patch(element("template"), { innerHTML: input });
const anonymousElement = () => class HyplateAnonymousElement extends HTMLElement {
};
let templateId = 0;
const templateName = (name) => name ?? `hype-${templateId++}`;
export const shadowed = (input, name) => {
    const t = template(input);
    return (setup) => {
        const elementTag = templateName(name);
        const slotTag = `${elementTag}-slot`;
        customElements.define(elementTag, anonymousElement());
        customElements.define(slotTag, anonymousElement());
        return (props) => (attach) => {
            const localCleanups = [];
            const slots = props.children;
            const owner = element(elementTag);
            const parent = attach(owner);
            const shadow = owner.attachShadow({ mode: "open" });
            shadow.appendChild(clone(t.content));
            if (slots) {
                for (const [name, slotInput] of Object.entries(slots)) {
                    if (slotInput == null) {
                        continue;
                    }
                    const element = document.createElement(slotTag);
                    if (isFunction(slotInput)) {
                        const [cleanupSlot] = slotInput(appendChild(element));
                        push(localCleanups, cleanupSlot);
                    }
                    else {
                        appendChild(element)(slotInput);
                    }
                    insertSlot(owner, name, element);
                }
            }
            const [hooks, cleanupHooks] = createHooks({
                host: shadow,
                parent,
            });
            enterHooks(hooks);
            const exposed = setup?.(props);
            quitHooks();
            const cleanupView = () => {
                for (const child of Array.from(shadow.childNodes)) {
                    remove(child);
                }
                for (const child of Array.from(owner.childNodes)) {
                    remove(child);
                }
                remove(owner);
            };
            const unmount = once(() => {
                cleanupHooks();
                applyAll(localCleanups)();
                cleanupView();
            });
            return [unmount, exposed, () => [owner, owner]];
        };
    };
};
export const replaced = (input, name) => {
    const t = template(input);
    const componentName = templateName(name);
    return (setup) => {
        return (options) => (attach) => {
            const localCleanups = [];
            const slots = options.children;
            const [cleanupComment, [begin, end, clearRange]] = withCommentRange(componentName);
            const fragment = clone(t.content);
            attach(begin);
            const host = attach(fragment);
            attach(end);
            if (slots) {
                const fragmentSlots = $$(host, "slot");
                for (const slot of fragmentSlots) {
                    const slotInput = slots[slot.name];
                    if (slotInput == null) {
                        continue;
                    }
                    const attach = before(slot);
                    if (isFunction(slotInput)) {
                        const [cleanupSlot] = slotInput(attach);
                        push(localCleanups, cleanupSlot);
                    }
                    else {
                        attach(slotInput);
                    }
                    remove(slot);
                }
            }
            const [hooks, cleanupHooks] = createHooks({ host, parent: host });
            enterHooks(hooks);
            const exposed = setup?.(options);
            quitHooks();
            const cleanupView = () => {
                clearRange();
                cleanupComment();
            };
            const unmount = once(() => {
                cleanupHooks();
                applyAll(localCleanups)();
                cleanupView();
            });
            return [unmount, exposed, () => [begin, end]];
        };
    };
};
//# sourceMappingURL=template.js.map