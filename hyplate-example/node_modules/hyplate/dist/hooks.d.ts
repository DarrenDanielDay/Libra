/**
 * @license MIT
 * Copyright (C) 2022  DarrenDanielDay <Darren_Daniel_Day@hotmail.com>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import type { ParseSelector } from "typed-query-selector/parser.js";
import type { AttachFunc, CleanUpFunc, EventHost, ExposeBase, Hooks, Mountable } from "./types.js";
type CreateHooksResult = [Hooks, CleanUpFunc];
export declare const createHooks: ({ host, parent }: {
    host: ParentNode;
    parent: Element;
}) => CreateHooksResult;
export declare const useCleanUpCollector: Hooks["useCleanUpCollector"];
export declare const useHost: Hooks["useHost"];
export declare const useParent: Hooks["useParent"];
export declare const useAnchor: (hid: string) => Element | null;
export declare const useChildView: <E extends ExposeBase>(mountable: Mountable<E>) => (attach: AttachFunc) => E;
export declare const useCleanUp: (cleanup: CleanUpFunc) => CleanUpFunc;
export declare const useEvent: <T extends EventTarget>(target: T) => EventHost<T>;
export declare const useRef: <S extends string>(selecor: S) => ParseSelector<S, Element> | null;
export {};
//# sourceMappingURL=hooks.d.ts.map