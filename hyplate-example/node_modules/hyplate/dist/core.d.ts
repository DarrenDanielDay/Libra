/**
 * @license MIT
 * Copyright (C) 2022  DarrenDanielDay <Darren_Daniel_Day@hotmail.com>
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import type { ParseSelector } from "typed-query-selector/parser.js";
import type { AttachFunc, AttributeInterpolation, CleanUpFunc, EventHost, Query, TextInterpolation } from "./types.js";
export declare const element: {
    <K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions | undefined): HTMLElementTagNameMap[K];
    <K_1 extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K_1, options?: ElementCreationOptions | undefined): HTMLElementDeprecatedTagNameMap[K_1];
    (tagName: string, options?: ElementCreationOptions | undefined): HTMLElement;
};
export declare const docFragment: () => DocumentFragment;
export declare const clone: <N extends Node>(node: N) => N;
export declare const attr: (element: Element, name: string, value: AttributeInterpolation) => void;
export declare const select: {
    <S extends string>(host: ParentNode, selecor: S): ParseSelector<S> | null;
    <S extends string>(selecor: S): ParseSelector<S> | null;
};
export declare const anchorRef: {
    (hid: string): HTMLTemplateElement | null;
    (owner: ParentNode, hid: string): Element | null;
};
export declare const $: {
    (hid: string): HTMLTemplateElement | null;
    (owner: ParentNode, hid: string): Element | null;
};
export declare const $$: <S extends string>(host: ParentNode, selector: S) => ParseSelector<S, Element>[];
export declare const bindText: (node: Node, query: Query<TextInterpolation>) => CleanUpFunc;
export declare const text: (fragments: TemplateStringsArray, ...bindings: (TextInterpolation | Query<TextInterpolation>)[]) => (attach: AttachFunc) => CleanUpFunc;
export declare const bindAttr: (el: Element, name: string, query: Query<AttributeInterpolation>) => CleanUpFunc;
export declare const bindEvent: <T extends EventTarget>(target: T) => EventHost<T>;
export declare const appendChild: <T>(host: Node) => (node: Node) => T;
export declare const before: (element: ChildNode) => (node: Node) => HTMLElement;
export declare const after: (element: ChildNode) => (node: Node) => HTMLElement;
export declare const seqAfter: (element: ChildNode) => (node: Node) => HTMLElement;
export declare const remove: (node: ChildNode) => void;
export declare const moveRange: (begin: Node | null, end: Node | null) => (attach: AttachFunc) => void;
export declare const insertSlot: (host: Element, slotName: string, element: Element) => void;
//# sourceMappingURL=core.d.ts.map